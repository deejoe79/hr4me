/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFieldItemArgs } from "./CreateFieldItemArgs";
import { UpdateFieldItemArgs } from "./UpdateFieldItemArgs";
import { DeleteFieldItemArgs } from "./DeleteFieldItemArgs";
import { FieldItemFindManyArgs } from "./FieldItemFindManyArgs";
import { FieldItemFindUniqueArgs } from "./FieldItemFindUniqueArgs";
import { FieldItem } from "./FieldItem";
import { SectionToFieldFindManyArgs } from "../../sectionToField/base/SectionToFieldFindManyArgs";
import { SectionToField } from "../../sectionToField/base/SectionToField";
import { FieldItemService } from "../fieldItem.service";

@graphql.Resolver(() => FieldItem)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FieldItemResolverBase {
  constructor(
    protected readonly service: FieldItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "read",
    possession: "any",
  })
  async _fieldItemsMeta(
    @graphql.Args() args: FieldItemFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FieldItem])
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "read",
    possession: "any",
  })
  async fieldItems(
    @graphql.Args() args: FieldItemFindManyArgs
  ): Promise<FieldItem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FieldItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "read",
    possession: "own",
  })
  async fieldItem(
    @graphql.Args() args: FieldItemFindUniqueArgs
  ): Promise<FieldItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FieldItem)
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "create",
    possession: "any",
  })
  async createFieldItem(
    @graphql.Args() args: CreateFieldItemArgs
  ): Promise<FieldItem> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FieldItem)
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "update",
    possession: "any",
  })
  async updateFieldItem(
    @graphql.Args() args: UpdateFieldItemArgs
  ): Promise<FieldItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FieldItem)
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "delete",
    possession: "any",
  })
  async deleteFieldItem(
    @graphql.Args() args: DeleteFieldItemArgs
  ): Promise<FieldItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SectionToField])
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "read",
    possession: "any",
  })
  async sectionToFields(
    @graphql.Parent() parent: FieldItem,
    @graphql.Args() args: SectionToFieldFindManyArgs
  ): Promise<SectionToField[]> {
    const results = await this.service.findSectionToFields(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
