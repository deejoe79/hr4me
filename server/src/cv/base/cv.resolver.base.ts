/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCvArgs } from "./CreateCvArgs";
import { UpdateCvArgs } from "./UpdateCvArgs";
import { DeleteCvArgs } from "./DeleteCvArgs";
import { CvFindManyArgs } from "./CvFindManyArgs";
import { CvFindUniqueArgs } from "./CvFindUniqueArgs";
import { Cv } from "./Cv";
import { SectionFindManyArgs } from "../../section/base/SectionFindManyArgs";
import { Section } from "../../section/base/Section";
import { User } from "../../user/base/User";
import { CvService } from "../cv.service";

@graphql.Resolver(() => Cv)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CvResolverBase {
  constructor(
    protected readonly service: CvService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "read",
    possession: "any",
  })
  async _cvsMeta(
    @graphql.Args() args: CvFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Cv])
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "read",
    possession: "any",
  })
  async cvs(@graphql.Args() args: CvFindManyArgs): Promise<Cv[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Cv, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "read",
    possession: "own",
  })
  async cv(@graphql.Args() args: CvFindUniqueArgs): Promise<Cv | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cv)
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "create",
    possession: "any",
  })
  async createCv(@graphql.Args() args: CreateCvArgs): Promise<Cv> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cv)
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "update",
    possession: "any",
  })
  async updateCv(@graphql.Args() args: UpdateCvArgs): Promise<Cv | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cv)
  @nestAccessControl.UseRoles({
    resource: "Cv",
    action: "delete",
    possession: "any",
  })
  async deleteCv(@graphql.Args() args: DeleteCvArgs): Promise<Cv | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Section])
  @nestAccessControl.UseRoles({
    resource: "Section",
    action: "read",
    possession: "any",
  })
  async sections(
    @graphql.Parent() parent: Cv,
    @graphql.Args() args: SectionFindManyArgs
  ): Promise<Section[]> {
    const results = await this.service.findSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Cv): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
