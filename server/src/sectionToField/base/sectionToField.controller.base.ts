/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SectionToFieldService } from "../sectionToField.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SectionToFieldCreateInput } from "./SectionToFieldCreateInput";
import { SectionToFieldWhereInput } from "./SectionToFieldWhereInput";
import { SectionToFieldWhereUniqueInput } from "./SectionToFieldWhereUniqueInput";
import { SectionToFieldFindManyArgs } from "./SectionToFieldFindManyArgs";
import { SectionToFieldUpdateInput } from "./SectionToFieldUpdateInput";
import { SectionToField } from "./SectionToField";
import { FieldItemFindManyArgs } from "../../fieldItem/base/FieldItemFindManyArgs";
import { FieldItem } from "../../fieldItem/base/FieldItem";
import { FieldItemWhereUniqueInput } from "../../fieldItem/base/FieldItemWhereUniqueInput";
import { SectionFindManyArgs } from "../../section/base/SectionFindManyArgs";
import { Section } from "../../section/base/Section";
import { SectionWhereUniqueInput } from "../../section/base/SectionWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SectionToFieldControllerBase {
  constructor(
    protected readonly service: SectionToFieldService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SectionToField })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: SectionToFieldCreateInput
  ): Promise<SectionToField> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [SectionToField] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(SectionToFieldFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<SectionToField[]> {
    const args = plainToClass(SectionToFieldFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SectionToField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: SectionToFieldWhereUniqueInput
  ): Promise<SectionToField | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SectionToField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() data: SectionToFieldUpdateInput
  ): Promise<SectionToField | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SectionToField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: SectionToFieldWhereUniqueInput
  ): Promise<SectionToField | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "FieldItem",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/field")
  @ApiNestedQuery(FieldItemFindManyArgs)
  async findManyField(
    @common.Req() request: Request,
    @common.Param() params: SectionToFieldWhereUniqueInput
  ): Promise<FieldItem[]> {
    const query = plainToClass(FieldItemFindManyArgs, request.query);
    const results = await this.service.findField(params.id, {
      ...query,
      select: {
        createdAt: true,
        fieldType: true,
        fieldValue: true,
        id: true,
        title: true,
        updatedAt: true,
        validationType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/field")
  async connectField(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: FieldItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      field: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/field")
  async updateField(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: FieldItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      field: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/field")
  async disconnectField(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: FieldItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      field: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Section",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/section")
  @ApiNestedQuery(SectionFindManyArgs)
  async findManySection(
    @common.Req() request: Request,
    @common.Param() params: SectionToFieldWhereUniqueInput
  ): Promise<Section[]> {
    const query = plainToClass(SectionFindManyArgs, request.query);
    const results = await this.service.findSection(params.id, {
      ...query,
      select: {
        columnCount: true,
        createdAt: true,

        cv: {
          select: {
            id: true,
          },
        },

        id: true,
        sectionType: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/section")
  async connectSection(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: SectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      section: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/section")
  async updateSection(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: SectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      section: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/section")
  async disconnectSection(
    @common.Param() params: SectionToFieldWhereUniqueInput,
    @common.Body() body: SectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      section: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
