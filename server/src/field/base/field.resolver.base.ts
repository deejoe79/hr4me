/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFieldArgs } from "./CreateFieldArgs";
import { UpdateFieldArgs } from "./UpdateFieldArgs";
import { DeleteFieldArgs } from "./DeleteFieldArgs";
import { FieldFindManyArgs } from "./FieldFindManyArgs";
import { FieldFindUniqueArgs } from "./FieldFindUniqueArgs";
import { Field } from "./Field";
import { SectionToFieldFindManyArgs } from "../../sectionToField/base/SectionToFieldFindManyArgs";
import { SectionToField } from "../../sectionToField/base/SectionToField";
import { FieldService } from "../field.service";

@graphql.Resolver(() => Field)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FieldResolverBase {
  constructor(
    protected readonly service: FieldService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "read",
    possession: "any",
  })
  async _fieldsMeta(
    @graphql.Args() args: FieldFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Field])
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "read",
    possession: "any",
  })
  async fields(@graphql.Args() args: FieldFindManyArgs): Promise<Field[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Field, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "read",
    possession: "own",
  })
  async field(
    @graphql.Args() args: FieldFindUniqueArgs
  ): Promise<Field | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Field)
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "create",
    possession: "any",
  })
  async createField(@graphql.Args() args: CreateFieldArgs): Promise<Field> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Field)
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "update",
    possession: "any",
  })
  async updateField(
    @graphql.Args() args: UpdateFieldArgs
  ): Promise<Field | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Field)
  @nestAccessControl.UseRoles({
    resource: "Field",
    action: "delete",
    possession: "any",
  })
  async deleteField(
    @graphql.Args() args: DeleteFieldArgs
  ): Promise<Field | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SectionToField])
  @nestAccessControl.UseRoles({
    resource: "SectionToField",
    action: "read",
    possession: "any",
  })
  async sectionToFields(
    @graphql.Parent() parent: Field,
    @graphql.Args() args: SectionToFieldFindManyArgs
  ): Promise<SectionToField[]> {
    const results = await this.service.findSectionToFields(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
